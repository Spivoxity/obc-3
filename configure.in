#
# configure.in
# 
# This file is part of the Oxford Oberon-2 compiler
# Copyright (c) 2006--2016 J. M. Spivey
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met: 
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution. 
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Process this file with autoconf to produce a configure script.

AC_INIT(obc, 3.0.7, mike@cs.ox.ac.uk)
# Don't forget to update version number in debian/changelog too.
AC_PREREQ(2.50)
AC_CONFIG_SRCDIR(compiler/tree.mli)
AC_CONFIG_AUX_DIR(scripts)
AC_CONFIG_FILES(Makefile compiler/Makefile runtime/Makefile lib/Makefile \
	test/Makefile winport/Makefile debugger/Makefile \
	lablgtk/Makefile macport/Makefile compat/Makefile)
AC_CONFIG_FILES(compiler/config.ml debugger/debconf.ml)
AC_CONFIG_FILES(test/regress, chmod +x test/regress)
AC_CONFIG_FILES(test/bigtest, chmod +x test/bigtest)
AC_CONFIG_FILES(test/edtest, chmod +x test/edtest)
AC_CONFIG_FILES(test/errtest, chmod +x test/errtest)
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SUBDIRS(yacc)
AC_CANONICAL_HOST

: ${AUTOCONF=autoconf} ${AUTOHEADER=autoheader}
AC_SUBST(AUTOCONF)
AC_SUBST(AUTOHEADER)
AC_SUBST(DEPEND, 1)

# Version info
MAGIC=OBCX
AC_DEFINE_UNQUOTED(MAGIC, "$MAGIC", [Magic number for trailer])
SIG=[`echo $PACKAGE_VERSION | sed -e 's/[0-9]*/0&/g' \
	-e 's/0\([0-9][0-9]\)/\1/' -e 's/\.//g' -e 's/^/0x00/'`]
AC_DEFINE_UNQUOTED(SIG, $SIG, [Version signature for symbol tables])
AC_SUBST(SIG)
DOS_VERSION=`echo $PACKAGE_VERSION | sed 's/\./-/g'`
AC_SUBST(DOS_VERSION)
AC_SUBST(PACKAGE_TRACKER, https://bitbucket.org/Spivey/obc-3/issues)
AC_DEFINE_UNQUOTED(PACKAGE_TRACKER, "$PACKAGE_TRACKER", [Bug tracker])

ABS_SRCDIR=`cd $srcdir; pwd`
ABS_BINDIR=`pwd`
AC_SUBST(ABS_SRCDIR)
AC_SUBST(ABS_BINDIR)

# Find out if this is Windows or MacOS
# Properly speaking, on Cygwin we are doing a cross-build.
DIRSEP="/"
case $host in
*-*-linux*)
  AC_DEFINE(LINUX, 1, [Define for Linux]);;
*-*-mingw|*-*-cygwin) 
  AC_SUBST(WINDOWS, 1)
  AC_DEFINE(WINDOWS, 1, [Define to enable hacks for Windows])
  AC_SUBST(ROOT, C:/cygwin)
  AC_SUBST(CFLAGS_JIT, [-Wl,--stack,4194304])
  DIRSEP="\\\\";;
*-*-darwin*)
  AC_SUBST(MACOS, 1)
  AC_DEFINE(MACOS, 1, [Define to enable hacks for MacOS X]);;
esac
AC_DEFINE_UNQUOTED(DIRSEP, "$DIRSEP", [Directory separator in file names])

AC_ARG_VAR(MLFLAGS, [Flags to pass to ocamlc])

if test "$WINDOWS" = 1; then
  AC_SUBST(MLLINKFLAGS, "-ccopt -L/lib/mingw")
fi

: ${GTKDIR=/usr}
AC_ARG_VAR(GTKDIR, [Directory to find GTK])


# Fonts for debugger
MONOFONT="Monospace 10"
SANSFONT="Sans 10"
if test "$MACOS" = 1; then
  MONOFONT="Monospace 14"
  SANSFONT="Lucida Grande 14"
fi
AC_SUBST(MONOFONT)
AC_SUBST(SANSFONT)


# Misc paths
OBDB1='"$LIBDIR/obdb1 -R $LIBDIR/resources"'
OBDB1_DEBUG='"$BINDIR/debugger/obdb1 -R $ROOT$TOPDIR/resources"'
if test "$MACOS" = 1; then
  OBDB1='"$LIBDIR/Obdb.app/Contents/MacOS/obdb"'
  OBDB1_DEBUG='"$BINDIR/macport/Obdb.app/Contents/MacOS/obdb"'
fi
AC_SUBST(OBDB1)
AC_SUBST(OBDB1_DEBUG)   


# Checks for programs.
case $host in
  x86_64-*-darwin*) CC='gcc -m32'; LD=ld;;
  x86_64-*-*) CC='gcc -m32'; LD='ld -melf_i386';;
  *) LD=ld;;
esac

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_SUBST(LD)

AC_CHECK_PROGS(TCLSH, tclsh)
test "$TCLSH" != "" || AC_MSG_ERROR(tclsh not found)

AC_CHECK_PROGS(DIFF, gdiff diff)
test "$DIFF" != "" || AC_MSG_ERROR(diff not found)

AC_PATH_PROG(PKG_CONFIG, pkg-config, /usr/bin/pkg-config, 
  $GTKDIR/bin$PATH_SEPARATOR$PATH)
test "$PKG_CONFIG" != "" || AC_MSG_ERROR(pkg-config not found)

# Disable fancy alias analysis if compiling with gcc
: ${RTFLAGS='${CFLAGS}'}
if test "$GCC" == yes; then
    RTFLAGS="$RTFLAGS -fno-strict-aliasing"
fi
AC_SUBST(RTFLAGS)

# Autoconf uses one, global variable LIBS for needed libraries.  I'm going
# to use it to keep track of the libraries needed for the runtime, and assume
# that other C-language components need only standard libraries.

# Package options
AC_ARG_ENABLE(debug,
  AS_HELP_STRING([--enable-debug], [set up for debugging]),
  if test "$enable_debug" = yes; then 
    DEBUG=1
    AC_DEFINE(DEBUG, 1, [Define to set up for debugging]) 
    : ${MLFLAGS=-g}
  fi)
AC_SUBST(DEBUG)

DYNLINK=1
AC_ARG_ENABLE(dynlink,
  AS_HELP_STRING([--disable-dynlink], [do not use dynamic linking]),
  if test "$enable_dynlink" = no; then
    DYNLINK=
  fi)
if test "$DYNLINK" = 1; then
  AC_DEFINE(DYNLINK, 1, [Define if dynamic linking enabled])
  AC_SEARCH_LIBS(dlopen, dl)
  AC_TEST_RDYNAMIC(DLFLAGS="-rdynamic")
fi
AC_SUBST(DYNLINK)
AC_SUBST(DLFLAGS)

case $host in
  *-*-darwin*) 
    SHL_CFLAGS="-fPIC -bundle -undefined dynamic_lookup"
    DLEXT=".so";;
  *)           
    SHL_CFLAGS="-fPIC"
    SHL_LFLAGS="-shared"
    DLEXT=".so";;
esac
AC_SUBST(SHL_CFLAGS)
AC_SUBST(SHL_LFLAGS)
AC_SUBST(DLEXT)
AC_DEFINE_UNQUOTED(DLEXT, "$DLEXT", [Extension for dynamic libraries])

AC_ARG_ENABLE(jit,
  AS_HELP_STRING([--disable-jit], [disable JIT translator]))
if test "$enable_jit" != no; then
    case $host in
	i?86-*|x86_64-*) 
	    ENABLE_JIT=1; OBJFMT=i386
            AC_DEFINE(NEED_FPINIT, 1, [Reboot FPU for each primitive]);;
        armv6l-*|armv7l-*|arm-*)
            ENABLE_JIT=1;;
    esac
fi
if test "$ENABLE_JIT" = 1; then
  AC_CONFIG_SUBDIRS(thunder)
fi
AC_SUBST(ENABLE_JIT)
AC_SUBST(VM)
AC_SUBST(OBJFMT)

AC_ARG_ENABLE(debugger,
  AS_HELP_STRING([--disable-debugger], [disable runtime debugger]))
if test "$enable_debugger" != no; then 
  AC_SUBST(ENABLE_DEBUGGER, 1)
fi
if test "$enable_debugger" = inet || test "$WINDOWS" = 1; then 
  AC_SUBST(USE_INET, 1)
  AC_DEFINE(USE_INET, 1, [Whether to use inet sockets for the debugger])
fi

AC_ARG_WITH(lablgtk2,
  AS_HELP_STRING([--with-lablgtk2=path]),
  LABLGTK2=$with_lablgtk2, LABLGTK2='${OCAMLDIR}/lablgtk2')
AC_SUBST(LABLGTK2)

GTKPKGS="gtk+-2.0 gtksourceview-2.0"
if test "$MACOS" = 1; then GTKPKGS="$GTKPKGS gtk-mac-integration"; fi
AC_SUBST(GTKPKGS)

# Check ocaml version
$as_echo_n "checking ocaml version... "
if ! ocamlc; then echo not found; else
  OCAML_VERSION=`ocamlc -v | sed -n '1s/.*version \([[0-9]]*\.[[0-9]]*\).*/\1/p'`
  $as_echo $OCAML_VERSION
  TMP=`echo $OCAML_VERSION | sed -e 's/\./\.0000/' -e 's/\.0*\([[0-9]][[0-9]][[0-9]][[0-9]]\)/\1/'`
  if test $TMP -lt 40002; then
      AC_SUBST(COMPAT, bytes.cmo)
  fi
fi

# Checks for libraries.
AC_CHECK_LIB(m, sin, MATHLIB=-lm)
AC_SUBST(MATHLIB)

# Checks for X
AC_PATH_XTRA
if test "$no_x" = yes; then
  XYPLANE=
else
  HAVE_X=1
  XYPLANE=XYplane
  XLIB="$X_LIBS -lX11"
fi
AC_SUBST(HAVE_X)
AC_SUBST(XYPLANE)
AC_SUBST(XLIB)

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h time.h sys/time.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN
AC_C_INLINE
AC_C_INDEXED_JUMPS
AC_C_UNUSED
AC_C_NORETURN
AC_FIND_PAGESIZE

# Checks for library functions.
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(clock time gettimeofday strtoul stpcpy)
AC_CHECK_FUNCS(mmap sigprocmask) # assume they work OK for our purposes
AC_CHECK_FUNCS(getopt_long_only)

if test "$WINDOWS" = 1; then
  OCAMLDIR='"/cygdrive/c/Program Files/Objective Caml/lib"'
  DEB_LIBS="$LIBS -lws2_32"
else
  OCAMLDIR=`ocamlc -where`
  BASE_LIBS=$LIBS
  if test "$ENABLE_DEBUGGER" = 1; then
      AC_SEARCH_LIBS(connect, socket)
  fi
  DEB_LIBS=$LIBS
  LIBS=$BASE_LIBS
fi
AC_SUBST(OCAMLDIR)
AC_SUBST(DEB_LIBS)


# Module list

# Library modules (apart from Builtin) in dependency order:
MODULES="DynLink Files Conv In Out Err Args Bit Timer GC \
	Strings Random Math MathL $XYPLANE"
AC_SUBST(MODULES)
MODULES_B="DynLink Files Conv In-b Out Err Args Bit Timer GC \
	Strings-b Random-b Math MathL $XYPLANE"
AC_SUBST(MODULES_B)
CHECKMODS="In Random Strings"
AC_SUBST(CHECKMODS)

# These modules contain standard primitives:
PRIMMODS="Args GC Timer DynLink Files Conv Random"
AC_SUBST(PRIMMODS)

# These modules have primitives in separate shared libraries:
SHLMODS="Math MathL $XYPLANE"
AC_SUBST(SHLMODS)

# Resource files needed by GUI debugger 
AC_SUBST(RESOURCES, "blank.png breakpoint.png continue.png here.png \
  oberon.lang pause.png sober.xml stepinto.png stepout.png stepover.png \
  restart.png exit.png")

# The endgame
AC_OUTPUT
